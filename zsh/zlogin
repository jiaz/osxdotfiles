#!/usr/bin/env zsh

export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export PATH="$HOME/bin:$PATH"

export EDITOR='emacs'

############
# Ruby Env #
############

# rbenv
export RBENV_ROOT="$HOME/.rbenv"

# Add rbenv root to PATH
if [[ -d $RBENV_ROOT ]];then
    export PATH="$RBENV_ROOT/shims:$PATH"
fi

# Initialize rbenv
if which rbenv > /dev/null; then eval "$(rbenv init -)"; fi

##############
# Python Env #
##############

# pyenv
export PYENV_ROOT="$HOME/.pyenv"

# Add pyenv root to PATH
if [[ -d $PYENV_ROOT ]];then
    export PATH="$PYENV_ROOT/shims:$PATH"
fi

# Initialize pyenv
if which pyenv > /dev/null; then eval "$(pyenv init -)"; fi
if which pyenv-virtualenv-init > /dev/null; then eval "$(pyenv virtualenv-init -)"; fi

export PIP_REQUIRE_VIRTUALENV=true
# Perfect! But once that option is set, how do we install or upgrade a global package?
syspip(){
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}
# If in the future we want to upgrade our global packages, the above function enables us to do so via:
# syspip install --upgrade pip setuptools virtualenv

############
# Node Env #
############

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . $NVM_DIR/nvm.sh

nvm use 0.10

